from django.shortcuts import render, get_object_or_404, redirectfrom django.contrib import messagesfrom django.core.mail import send_mailfrom django.contrib.auth.decorators import login_requiredfrom django.contrib.auth import login, authenticatefrom django.http import HttpResponsefrom docx import Documentfrom docx.shared import Inchesfrom datetime import datetimeimport csvfrom openpyxl import Workbookfrom openpyxl.styles import Font, Alignment, PatternFillfrom openpyxl.utils import get_column_letterfrom datetime import datetime  # ← Добавь этоfrom .models import OvertimeRequest, Employee, ApprovalLog, Positionfrom .forms import OvertimeRequestForm, EmployeeRegistrationForm, EmployeeProfileFormfrom django.contrib.auth.views import LogoutView as DjangoLogoutViewclass LogoutView(DjangoLogoutView):    http_method_names = ['get', 'post']  # ← Разрешаем GET и POSTdef home(request):    return render(request, 'overtime_app/home.html')@login_requireddef export_requests_csv(request):    employee = Employee.objects.get(email=request.user.email)    is_manager = employee.is_manager    # Начальный queryset    if is_manager:        requests = OvertimeRequest.objects.filter(employee__manager1=employee)    else:        requests = OvertimeRequest.objects.filter(employee=employee)    # Фильтры    reason = request.GET.get('reason')    employee_name = request.GET.get('employee_name')    start_date = request.GET.get('start_date')    end_date = request.GET.get('end_date')    status = request.GET.get('status')    if reason:        requests = requests.filter(reason=reason)    if employee_name and is_manager:        requests = requests.filter(employee__full_name__icontains=employee_name)    if start_date:        requests = requests.filter(start_datetime__date__gte=start_date)    if end_date:        requests = requests.filter(end_datetime__date__lte=end_date)    if status:        requests = requests.filter(status=status)    # Создаем CSV    response = HttpResponse(content_type='text/csv')    response['Content-Disposition'] = f'attachment; filename="requests_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv"'    writer = csv.writer(response)    writer.writerow(['Номер', 'Сотрудник', 'Отдел', 'Начало', 'Окончание', 'Часы', 'Причина', 'Обоснование', 'Статус'])    for req in requests:        writer.writerow([            req.id,            req.employee.full_name,            req.employee.department,            req.start_datetime.strftime('%d.%m.%Y %H:%M'),            req.end_datetime.strftime('%d.%m.%Y %H:%M'),            req.hours,            req.get_reason_display(),            req.justification,            req.get_status_display()        ])    return response@login_requireddef export_requests_word(request):    employee = Employee.objects.get(email=request.user.email)    is_manager = employee.is_manager    # Начальный queryset    if is_manager:        requests = OvertimeRequest.objects.filter(employee__manager1=employee)    else:        requests = OvertimeRequest.objects.filter(employee=employee)    # Фильтры    reason = request.GET.get('reason')    employee_name = request.GET.get('employee_name')    start_date = request.GET.get('start_date')    end_date = request.GET.get('end_date')    status = request.GET.get('status')    if reason:        requests = requests.filter(reason=reason)    if employee_name and is_manager:        requests = requests.filter(employee__full_name__icontains=employee_name)    if start_date:        requests = requests.filter(start_datetime__date__gte=start_date)    if end_date:        requests = requests.filter(end_datetime__date__lte=end_date)    if status:        requests = requests.filter(status=status)    # Создаем Word документ    doc = Document()    doc.add_heading('Заявки на переработку', 0)    # Добавляем таблицу    table = doc.add_table(rows=1, cols=9)    table.style = 'Table Grid'    # Заголовки    hdr_cells = table.rows[0].cells    hdr_cells[0].text = 'Номер'    hdr_cells[1].text = 'Сотрудник'    hdr_cells[2].text = 'Отдел'    hdr_cells[3].text = 'Начало'    hdr_cells[4].text = 'Окончание'    hdr_cells[5].text = 'Часы'    hdr_cells[6].text = 'Причина'    hdr_cells[7].text = 'Обоснование'    hdr_cells[8].text = 'Статус'    # Данные    for req in requests:        row_cells = table.add_row().cells        row_cells[0].text = str(req.id)        row_cells[1].text = req.employee.full_name        row_cells[2].text = req.employee.department        row_cells[3].text = req.start_datetime.strftime('%d.%m.%Y %H:%M')        row_cells[4].text = req.end_datetime.strftime('%d.%m.%Y %H:%M')        row_cells[5].text = str(req.hours)        row_cells[6].text = req.get_reason_display()        row_cells[7].text = req.justification        row_cells[8].text = req.get_status_display()    # Отправляем файл    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.wordprocessingml.document')    response['Content-Disposition'] = f'attachment; filename="requests_{datetime.now().strftime("%Y%m%d_%H%M%S")}.docx"'    doc.save(response)    return response@login_requireddef export_requests(request):    employee = Employee.objects.get(email=request.user.email)    is_manager = employee.is_manager    # Начальный queryset    if is_manager:        requests = OvertimeRequest.objects.filter(employee__manager1=employee)    else:        requests = OvertimeRequest.objects.filter(employee=employee)    # Фильтры    reason = request.GET.get('reason')    employee_name = request.GET.get('employee_name')    start_date = request.GET.get('start_date')    end_date = request.GET.get('end_date')    status = request.GET.get('status')    if reason:        requests = requests.filter(reason=reason)    if employee_name and is_manager:        requests = requests.filter(employee__full_name__icontains=employee_name)    if start_date:        requests = requests.filter(start_datetime__date__gte=start_date)    if end_date:        requests = requests.filter(end_datetime__date__lte=end_date)    if status:        requests = requests.filter(status=status)    # Для отображения формы фильтров    reasons = OvertimeRequest.REASON_CHOICES    statuses = OvertimeRequest.STATUS_CHOICES    if is_manager:        employees = Employee.objects.filter(manager1=employee)    else:        employees = Employee.objects.none()    context = {        'requests': requests,        'reasons': reasons,        'statuses': statuses,        'employees': employees,        'is_manager': is_manager,        'filters': {            'reason': reason,            'employee_name': employee_name,            'start_date': start_date,            'end_date': end_date,            'status': status,        }    }    return render(request, 'overtime_app/export_requests.html', context)def portal_login(request):    if request.method == 'POST':        username = request.POST.get('username')        password = request.POST.get('password')        user = authenticate(request, username=username, password=password)        if user is not None:            login(request, user)            return redirect('overtime_app:dashboard')        else:            messages.error(request, 'Неверное имя пользователя или пароль')    return render(request, 'overtime_app/login.html')def register(request):    if request.method == 'POST':        form = EmployeeRegistrationForm(request.POST)        if form.is_valid():            employee = form.save()            messages.success(request, f'Сотрудник {employee.full_name} успешно зарегистрирован!')            return redirect('portal_login')    else:        form = EmployeeRegistrationForm()    return render(request, 'overtime_app/register.html', {'form': form})@login_requireddef dashboard(request):    try:        employee = Employee.objects.get(email=request.user.email)    except Employee.DoesNotExist:        messages.error(request, 'Ваш профиль сотрудника не найден. Пожалуйста, зарегистрируйтесь.')        return redirect('register')    except Employee.MultipleObjectsReturned:        messages.error(request, 'Ошибка: найдено несколько сотрудников с этим email. Обратитесь к администратору.')        return redirect('home')    # Проверим, является ли сотрудник руководителем    is_manager = employee.is_manager  # ← Теперь через property    my_requests = OvertimeRequest.objects.filter(employee=employee).order_by('-created_at')    if is_manager:        # Заявки подчинённых        subordinates_requests = OvertimeRequest.objects.filter(            employee__manager1=employee        ).order_by('-created_at')    else:        subordinates_requests = []    context = {        'employee': employee,        'my_requests': my_requests,        'subordinates_requests': subordinates_requests,        'is_manager': is_manager,    }    return render(request, 'overtime_app/dashboard.html', context)@login_requireddef profile_settings(request):    employee = Employee.objects.get(email=request.user.email)    if request.method == 'POST':        form = EmployeeProfileForm(request.POST, instance=employee)        if form.is_valid():            form.save()            messages.success(request, 'Профиль успешно обновлён!')            return redirect('overtime_app:profile_settings')    else:        form = EmployeeProfileForm(instance=employee)    return render(request, 'overtime_app/profile_settings.html', {'form': form})@login_requireddef create_request(request):    employee = Employee.objects.get(email=request.user.email)    if request.method == 'POST':        form = OvertimeRequestForm(request.POST)        if form.is_valid():            req = form.save(commit=False)            req.employee = employee  # ← Привязываем текущего сотрудника            req.save()            req.status = 'pending'            req.save()            # Отправить письмо первому руководителю            manager = req.employee.manager1            if manager and manager.email:                send_mail(                    subject='Заявка на переработку на согласование',                    message=f'Заявка #{req.id} от {req.employee.full_name} ждет вашего согласования.',                    from_email='from@example.com',                    recipient_list=[manager.email],                )            messages.success(request, 'Заявка создана и отправлена на согласование.')            return redirect('overtime_app:dashboard')    else:        form = OvertimeRequestForm()    return render(request, 'overtime_app/create_request.html', {'form': form})@login_requireddef my_requests(request):    employee = Employee.objects.get(email=request.user.email)    requests = OvertimeRequest.objects.filter(employee=employee).order_by('-created_at')    return render(request, 'overtime_app/my_requests.html', {'requests': requests})def view_requests(request):    if not request.user.is_authenticated:        return redirect('portal_login')    employee = Employee.objects.get(email=request.user.email)    # Только руководитель может видеть заявки подчинённых    if not (Employee.objects.filter(manager1=employee).exists() or            Employee.objects.filter(manager2=employee).exists()):        messages.error(request, 'У вас нет прав для просмотра заявок подчинённых')        return redirect('overtime_app:dashboard')    requests = OvertimeRequest.objects.filter(        employee__manager1=employee    ).order_by('-created_at')    return render(request, 'overtime_app/view_requests.html', {'requests': requests})def approve_request(request, req_id):    req = get_object_or_404(OvertimeRequest, id=req_id)    # manager = Employee.objects.get(...)  # Тут нужно определить текущего менеджера    decision = request.POST.get('decision')    comment = request.POST.get('comment', '')    ApprovalLog.objects.create(        request=req,        approver=...,  # Нужно определить текущего пользователя        decision=decision,        comment=comment    )    if decision == 'rejected':        req.status = 'rejected'        req.save()        send_mail(            subject='Заявка отклонена',            message=f'Ваша заявка #{req.id} была отклонена.',            from_email='from@example.com',            recipient_list=[req.employee.email],        )        return redirect('overtime_app:dashboard')    elif decision == 'approved':        req.status = 'approved'        req.save()        messages.success(request, 'Заявка согласована.')        return redirect('overtime_app:dashboard')    return redirect('overtime_app:dashboard')