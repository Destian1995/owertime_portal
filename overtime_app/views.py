from django.shortcuts import render, get_object_or_404, redirectfrom django.contrib import messagesfrom django.core.mail import send_mailfrom django.contrib.auth.decorators import login_requiredfrom django.contrib.auth import login, authenticatefrom django.contrib.auth.models import Userfrom django.http import HttpResponseForbiddenfrom .models import OvertimeRequest, Employee, ApprovalLog, Positionfrom .forms import OvertimeRequestForm, EmployeeRegistrationFormfrom .forms import EmployeeProfileFormfrom django.contrib.auth.views import LogoutView as DjangoLogoutViewclass LogoutView(DjangoLogoutView):    http_method_names = ['get', 'post']  # ← Разрешаем GET и POSTdef home(request):    return render(request, 'overtime_app/home.html')def portal_login(request):    if request.method == 'POST':        username = request.POST.get('username')        password = request.POST.get('password')        user = authenticate(request, username=username, password=password)        if user is not None:            login(request, user)            return redirect('overtime_app:dashboard')        else:            messages.error(request, 'Неверное имя пользователя или пароль')    return render(request, 'overtime_app/login.html')def register(request):    if request.method == 'POST':        form = EmployeeRegistrationForm(request.POST)        if form.is_valid():            employee = form.save()            messages.success(request, f'Сотрудник {employee.full_name} успешно зарегистрирован!')            return redirect('portal_login')    else:        form = EmployeeRegistrationForm()    return render(request, 'overtime_app/register.html', {'form': form})@login_requireddef dashboard(request):    try:        employee = Employee.objects.get(email=request.user.email)    except Employee.DoesNotExist:        messages.error(request, 'Ваш профиль сотрудника не найден. Пожалуйста, зарегистрируйтесь.')        return redirect('register')    except Employee.MultipleObjectsReturned:        messages.error(request, 'Ошибка: найдено несколько сотрудников с этим email. Обратитесь к администратору.')        return redirect('home')    # Проверим, является ли сотрудник руководителем    is_manager = employee.is_manager  # ← Теперь через property    my_requests = OvertimeRequest.objects.filter(employee=employee).order_by('-created_at')    if is_manager:        # Заявки подчинённых        subordinates_requests = OvertimeRequest.objects.filter(            employee__manager1=employee        ).order_by('-created_at')    else:        subordinates_requests = []    context = {        'employee': employee,        'my_requests': my_requests,        'subordinates_requests': subordinates_requests,        'is_manager': is_manager,    }    return render(request, 'overtime_app/dashboard.html', context)@login_requireddef profile_settings(request):    employee = Employee.objects.get(email=request.user.email)    if request.method == 'POST':        form = EmployeeProfileForm(request.POST, instance=employee)        if form.is_valid():            form.save()            messages.success(request, 'Профиль успешно обновлён!')            return redirect('overtime_app:profile_settings')    else:        form = EmployeeProfileForm(instance=employee)    return render(request, 'overtime_app/profile_settings.html', {'form': form})@login_requireddef create_request(request):    employee = Employee.objects.get(email=request.user.email)    if request.method == 'POST':        form = OvertimeRequestForm(request.POST)        if form.is_valid():            req = form.save(commit=False)            req.employee = employee  # ← Привязываем текущего сотрудника            req.save()            req.status = 'pending'            req.save()            # Отправить письмо первому руководителю            manager = req.employee.manager1            if manager and manager.email:                send_mail(                    subject='Заявка на переработку на согласование',                    message=f'Заявка #{req.id} от {req.employee.full_name} ждет вашего согласования.',                    from_email='from@example.com',                    recipient_list=[manager.email],                )            messages.success(request, 'Заявка создана и отправлена на согласование.')            return redirect('overtime_app:dashboard')    else:        form = OvertimeRequestForm()    return render(request, 'overtime_app/create_request.html', {'form': form})@login_requireddef my_requests(request):    employee = Employee.objects.get(email=request.user.email)    requests = OvertimeRequest.objects.filter(employee=employee).order_by('-created_at')    return render(request, 'overtime_app/my_requests.html', {'requests': requests})def view_requests(request):    if not request.user.is_authenticated:        return redirect('portal_login')    employee = Employee.objects.get(email=request.user.email)    # Только руководитель может видеть заявки подчинённых    if not (Employee.objects.filter(manager1=employee).exists() or            Employee.objects.filter(manager2=employee).exists()):        messages.error(request, 'У вас нет прав для просмотра заявок подчинённых')        return redirect('overtime_app:dashboard')    requests = OvertimeRequest.objects.filter(        employee__manager1=employee    ).order_by('-created_at')    return render(request, 'overtime_app/view_requests.html', {'requests': requests})def approve_request(request, req_id):    req = get_object_or_404(OvertimeRequest, id=req_id)    # manager = Employee.objects.get(...)  # Тут нужно определить текущего менеджера    decision = request.POST.get('decision')    comment = request.POST.get('comment', '')    ApprovalLog.objects.create(        request=req,        approver=...,  # Нужно определить текущего пользователя        decision=decision,        comment=comment    )    if decision == 'rejected':        req.status = 'rejected'        req.save()        send_mail(            subject='Заявка отклонена',            message=f'Ваша заявка #{req.id} была отклонена.',            from_email='from@example.com',            recipient_list=[req.employee.email],        )        return redirect('overtime_app:dashboard')    elif decision == 'approved':        req.status = 'approved'        req.save()        messages.success(request, 'Заявка согласована.')        return redirect('overtime_app:dashboard')    return redirect('overtime_app:dashboard')